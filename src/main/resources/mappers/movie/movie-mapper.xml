<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ss.cinema.mappers.MovieMapper">

	<resultMap type="movieDTO" id="movieResultMap">
		<id property="movieNo" column="MOVIE_NO"/>
		<result property="movieTitle" column="MOVIE_TITLE"/>
		<result property="movieStartDate" column="MOVIE_START_DATE"/>
		<result property="movieEndDate" column="MOVIE_END_DATE"/>
		<result property="movieDirector" column="MOVIE_DIRECTOR"/>
		<result property="movieActor" column="MOVIE_ACTOR"/>
		<result property="movieGenre" column="MOVIE_GENRE"/>
		<result property="movieAgeLimit" column="MOVIE_AGE_LIMIT"/>
		<result property="movieShowtime" column="MOVIE_SHOWTIME"/>
		<result property="movieNationality" column="MOVIE_NATIONALITY"/>
		<result property="movieSummary" column="MOVIE_SUMMARY"/>
		<result property="movieMainImage" column="MOVIE_MAIN_IMAGE"/>
		<result property="movieSubImage" column="MOVIE_SUB_IMAGE"/>
		<result property="movieSsubImage" column="MOVIE_SSUB_IMAGE"/>
		<result property="movieTrailer" column="MOVIE_TRAILER"/>
		<result property="movieMainTrailer" column="MOVIE_MAIN_TRAILER"/>
		<result property="movieSubTrailer" column="MOVIE_SUB_TRAILER"/>
		<result property="movieSsubTrailer" column="MOVIE_SSUB_TRAILER"/>
		<result property="movieMainThumbnail" column="MOVIE_MAIN_THUMBNAIL"/>
		<result property="movieSubThumbnail" column="MOVIE_SUB_THUMBNAIL"/>
		<result property="movieSsubThumbnail" column="MOVIE_SSUB_THUMBNAIL"/>
		<result property="ratingStarAVG" column="movieRating"/>
		<result property="movieReservation" column="RESERVATION_RATE"/>
	</resultMap>
	
	<resultMap type="ReviewDTO" id="reviewResultMap">
    <id property="reviewNo" column="REVIEW_NO"/>
    <result property="reviewMemberId" column="REVIEW_MEMBER_ID"/>
    <result property="reviewMovieNo" column="REVIEW_MOVIE_NO"/>
    <result property="reviewContent" column="REVIEW_CONTENT"/>
    <result property="reviewWriteDate" column="REVIEW_WRITE_DATE"/>
    <result property="reviewStarRating" column="REVIEW_STAR_RATING"/>
    <result property="reviewLikeCount" column="REVIEW_LIKE_COUNT"/>
    <result property="reviewTotal" column="total_reviews"/>
	<result property="memberImg" column="MEMBER_IMG"/>
	<result property="myLike"	 column="myLike"/>
	</resultMap>
	
	<resultMap type="LikesDTO" id="likesResultMap">
	<id property="likesNo" column="LIKES_NO"/>
	<result property="likesReviewNo" column="LIKES_REVIEW_NO"/>
	<result property="likesMemberId" column="LIKES_MEMBER_ID"/>
	</resultMap>


	<!-- 영화 리스트 정보 출력하기 -->
    <select id="getMovieListInfo" resultMap="movieResultMap">
 		SELECT
            m.movie_no,
            m.movie_title,
            m.movie_main_image,
            COALESCE(AVG(r.REVIEW_STAR_RATING), 0) AS movieRating
        FROM
            movie m
        LEFT JOIN
            review r ON m.movie_no = r.review_movie_no
        GROUP BY
            m.movie_no, m.movie_title, m.movie_main_image
    </select>
    
    <!-- 영화 상세 정보 출력하기 -->
    <select id="getMovieDetailInfo" parameterType="com.ss.cinema.dto.movieDTO" resultMap="movieResultMap">
	select
    	m.MOVIE_NO,
		m.MOVIE_TITLE,
		m.MOVIE_START_DATE,
		m.MOVIE_DIRECTOR,
		m.MOVIE_ACTOR,
		m.MOVIE_GENRE,
		m.MOVIE_AGE_LIMIT,
		m.MOVIE_SHOWTIME,
		m.MOVIE_NATIONALITY,
		m.MOVIE_MAIN_IMAGE,
        m.MOVIE_SUB_IMAGE,
        m.MOVIE_SSUB_IMAGE,
        m.MOVIE_MAIN_TRAILER,
        m.MOVIE_SUB_TRAILER,
        m.MOVIE_SSUB_TRAILER,
        m.MOVIE_MAIN_THUMBNAIL,
        m.MOVIE_SUB_THUMBNAIL,
        m.MOVIE_SSUB_THUMBNAIL,
		(SELECT MOVIE_SUMMARY FROM MOVIE WHERE MOVIE_NO = m.MOVIE_NO) AS
		MOVIE_SUMMARY,
		COALESCE(AVG(r.REVIEW_STAR_RATING), 0) AS movieRating
	FROM
		MOVIE m
	LEFT JOIN
		REVIEW r ON m.MOVIE_NO = r.REVIEW_MOVIE_NO
	WHERE
		m.MOVIE_NO = #{movieNo}
	GROUP BY
		m.MOVIE_NO,
		m.MOVIE_TITLE,
		m.MOVIE_START_DATE,
		m.MOVIE_DIRECTOR,
		m.MOVIE_ACTOR,
		m.MOVIE_GENRE,
		m.MOVIE_AGE_LIMIT,
		m.MOVIE_SHOWTIME,
		m.MOVIE_NATIONALITY,
		m.MOVIE_MAIN_IMAGE,
        m.MOVIE_SUB_IMAGE,
        m.MOVIE_SSUB_IMAGE,
		m.MOVIE_MAIN_TRAILER,
        m.MOVIE_SUB_TRAILER,
        m.MOVIE_SSUB_TRAILER,
        m.MOVIE_MAIN_THUMBNAIL,
        m.MOVIE_SUB_THUMBNAIL,
        m.MOVIE_SSUB_THUMBNAIL
    </select>

	<!-- 영화별 리뷰 출력 -->
	<select id="getMovieReviewInfo" parameterType="com.ss.cinema.dto.ReviewDTO" resultMap="reviewResultMap">
	SELECT
	    R.REVIEW_NO,
	    R.REVIEW_MEMBER_ID,
	    R.REVIEW_WRITE_DATE,
	    R.REVIEW_CONTENT,
	    R.REVIEW_STAR_RATING,
	    COALESCE(L.LIKE_COUNT, 0) AS REVIEW_LIKE_COUNT,
	    M.MEMBER_IMG
	FROM
	    MOVIE MO
	JOIN
	    REVIEW R ON MO.MOVIE_NO = R.REVIEW_MOVIE_NO
	JOIN
	    MEMBER M ON R.REVIEW_MEMBER_ID = M.MEMBER_ID
	LEFT JOIN 
	    (
	        SELECT
	            likes_review_no,
	            COUNT(*) AS LIKE_COUNT
	        FROM
	            likes
	        GROUP BY
	            likes_review_no
	    ) L ON R.REVIEW_NO = L.likes_review_no
	WHERE
	    MO.MOVIE_NO = #{movieNo}
	ORDER BY
	    R.REVIEW_WRITE_DATE DESC
	</select>

	<!-- 영화별 리뷰 총 개수 -->
	<select id="getReviewTotal" parameterType="com.ss.cinema.dto.ReviewDTO" resultMap="reviewResultMap">
	SELECT
		COUNT(*) AS total_reviews
	FROM
		review r
	WHERE
		r.review_movie_no = #{movieNo}
	</select>
	
	<!-- 영화별 예매율  -->
	<select id="getMovieReservationInfo" parameterType="com.ss.cinema.dto.movieDTO" resultMap="movieResultMap">
	SELECT 
	    M.MOVIE_NO,
	    M.MOVIE_TITLE,
	    COALESCE(ROUND((COUNT(T.TICKET_NO) / (SELECT COUNT(*) FROM TICKET) * 100)), 0) AS RESERVATION_RATE
	FROM 
	    MOVIE M
	LEFT JOIN 
	    TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
	WHERE 
	    M.MOVIE_NO = #{movieNo}  
	GROUP BY 
	    M.MOVIE_NO, M.MOVIE_TITLE
	</select> 
	
	<!-- 예매율순 정렬 -->
	<select id="sortReservation" resultMap="movieResultMap">
	SELECT 
	    M.MOVIE_NO,
	    M.MOVIE_TITLE,
	    M.MOVIE_MAIN_IMAGE,
        M.MOVIE_AGE_LIMIT,
	    COALESCE(AVG(R.REVIEW_STAR_RATING), 0) AS movieRating,
	    COALESCE(ROUND((COUNT(T.TICKET_NO) / NULLIF(SUM(COUNT(T.TICKET_NO)) OVER (), 0)) * 100, 0), 0) AS RESERVATION_RATE
	FROM 
	    MOVIE M
	LEFT JOIN 
	    REVIEW R ON M.MOVIE_NO = R.REVIEW_MOVIE_NO
	LEFT JOIN 
	    TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
	GROUP BY 
	    M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_MAIN_IMAGE, M.MOVIE_AGE_LIMIT
	ORDER BY 
	    RESERVATION_RATE DESC
	</select>
	
	
	<!-- 별점순 정렬 -->
	<select id="sortmovieRating" resultMap="movieResultMap">
	SELECT 
	    M.MOVIE_NO,
	    M.MOVIE_TITLE,
	    M.MOVIE_MAIN_IMAGE,
        M.MOVIE_AGE_LIMIT,
	    COALESCE(AVG(R.REVIEW_STAR_RATING), 0) AS movieRating,
	    COALESCE(ROUND((COUNT(T.TICKET_NO) / NULLIF(SUM(COUNT(T.TICKET_NO)) OVER (), 0)) * 100, 0), 0) AS RESERVATION_RATE
	FROM 
	    MOVIE M
	LEFT JOIN 
	    REVIEW R ON M.MOVIE_NO = R.REVIEW_MOVIE_NO
	LEFT JOIN 
	    TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
	GROUP BY 
	    M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_MAIN_IMAGE, M.MOVIE_AGE_LIMIT
	ORDER BY     
	    movieRating DESC;
	</select>
	
	<!-- 영화 검색 -->
	<select id="searchMovieTitle" parameterType="java.lang.String" resultMap="movieResultMap">
	WITH MovieData AS (
        SELECT 
            M.MOVIE_NO,
            M.MOVIE_TITLE,
            M.MOVIE_MAIN_IMAGE,
            M.MOVIE_AGE_LIMIT,
            COALESCE(AVG(R.REVIEW_STAR_RATING), 0) AS movieRating,
            COALESCE(ROUND((COUNT(T.TICKET_NO) / NULLIF(SUM(COUNT(T.TICKET_NO)) OVER (), 0)) * 100, 0), 0) AS RESERVATION_RATE
        FROM 
            MOVIE M
        LEFT JOIN 
            REVIEW R ON M.MOVIE_NO = R.REVIEW_MOVIE_NO
        LEFT JOIN 
            TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
        GROUP BY 
            M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_MAIN_IMAGE, M.MOVIE_AGE_LIMIT
    )
    SELECT *
    FROM MovieData
    WHERE MOVIE_TITLE LIKE '%' || #{movieTitle} || '%'
	</select>
 	
	<!-- 현재상영작을 예매율순으로 정렬 -->
 	<select id="sortCurrentReAservationMovie" resultMap="movieResultMap">
	WITH MovieData AS (
        SELECT 
            M.MOVIE_NO,
            M.MOVIE_TITLE,
            M.MOVIE_MAIN_IMAGE,
            M.MOVIE_AGE_LIMIT,
            COALESCE(AVG(R.REVIEW_STAR_RATING), 0) AS movieRating,
            COUNT(T.TICKET_NO) AS ticketCount
        FROM 
            MOVIE M
        LEFT JOIN 
            REVIEW R ON M.MOVIE_NO = R.REVIEW_MOVIE_NO
        LEFT JOIN 
            TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
        WHERE 
            M.MOVIE_START_DATE &lt;= CURRENT_DATE
        GROUP BY 
            M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_MAIN_IMAGE, M.MOVIE_AGE_LIMIT
    )
    SELECT 
        MovieData.MOVIE_NO,
        MovieData.MOVIE_TITLE,
        MovieData.MOVIE_MAIN_IMAGE,
        MovieData.movieRating,
        MovieData.MOVIE_AGE_LIMIT,
        COALESCE(ROUND((MovieData.ticketCount / NULLIF(SUM(MovieData.ticketCount) OVER (), 0)) * 100, 0), 0) AS RESERVATION_RATE
    FROM 
        MovieData
    ORDER BY 
        RESERVATION_RATE DESC
	</select>

	<!-- 현재개봉작을 별점순으로 정렬 -->
	<select id="sortCurrentMovieRatingMovie" resultMap="movieResultMap">
    WITH MovieData AS (
        SELECT 
            M.MOVIE_NO,
            M.MOVIE_TITLE,
            M.MOVIE_MAIN_IMAGE,
            M.MOVIE_AGE_LIMIT,
            COALESCE(AVG(R.REVIEW_STAR_RATING), 0) AS movieRating,
            COUNT(T.TICKET_NO) AS ticketCount
        FROM 
            MOVIE M
        LEFT JOIN 
            REVIEW R ON M.MOVIE_NO = R.REVIEW_MOVIE_NO
        LEFT JOIN 
            TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
        WHERE 
            M.MOVIE_START_DATE &lt;= CURRENT_DATE
        GROUP BY 
            M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_MAIN_IMAGE, M.MOVIE_AGE_LIMIT
    )
    SELECT 
        MovieData.MOVIE_NO,
        MovieData.MOVIE_TITLE,
        MovieData.MOVIE_MAIN_IMAGE,
        MovieData.movieRating,
        MovieData.MOVIE_AGE_LIMIT,
        COALESCE(ROUND((MovieData.ticketCount / NULLIF(SUM(MovieData.ticketCount) OVER (), 0)) * 100, 0), 0) AS RESERVATION_RATE
    FROM 
        MovieData
    ORDER BY 
        MovieData.movieRating DESC
	</select>

	<!-- 개봉예정작 -->
	<select id="sortUpcomingMovie" resultMap="movieResultMap">
	WITH MovieData AS (
        SELECT 
            M.MOVIE_NO,
            M.MOVIE_TITLE,
            M.MOVIE_MAIN_IMAGE,
            M.MOVIE_AGE_LIMIT,
            M.MOVIE_START_DATE,
            COALESCE(AVG(R.REVIEW_STAR_RATING), 0) AS movieRating,
            COUNT(T.TICKET_NO) AS ticketCount
        FROM 
            MOVIE M
        LEFT JOIN 
            REVIEW R ON M.MOVIE_NO = R.REVIEW_MOVIE_NO
        LEFT JOIN 
            TICKET T ON M.MOVIE_NO = T.TICKET_MOVIE_NO
        WHERE 
            M.MOVIE_START_DATE &gt; CURRENT_DATE
        GROUP BY 
            M.MOVIE_NO, M.MOVIE_TITLE, M.MOVIE_MAIN_IMAGE, M.MOVIE_AGE_LIMIT, M.MOVIE_START_DATE
        ORDER BY
            M.MOVIE_START_DATE
    )
    SELECT 
        MovieData.MOVIE_NO,
        MovieData.MOVIE_TITLE,
        MovieData.MOVIE_MAIN_IMAGE,
        MovieData.movieRating,
        MovieData.MOVIE_AGE_LIMIT,
        MovieData.MOVIE_START_DATE,
        COALESCE(ROUND((MovieData.ticketCount / NULLIF(SUM(MovieData.ticketCount) OVER (), 0)) * 100, 0), 0) AS RESERVATION_RATE
    FROM 
        MovieData
	</select>

<!-- 리뷰 좋아요 수 업데이트 -->
<!-- <update id="updateLikeCount">
    UPDATE REVIEW
    SET REVIEW_LIKE_COUNT = REVIEW_LIKE_COUNT + #{amount}
    WHERE REVIEW_NO = #{reviewNo}
</update> -->

	<!-- 좋아요 누른지 확인 -->
	<select id="checkLikes" resultType="int">
		SELECT COUNT(*) FROM LIKES WHERE LIKES_REVIEW_NO = #{reviewNo} AND LIKES_MEMBER_ID = #{memberId}
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="AddLikes">
		INSERT INTO LIKES (LIKES_REVIEW_NO, LIKES_MEMBER_ID) VALUES (#{reviewNo}, #{memberId})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="deleteLikes">
		DELETE FROM LIKES WHERE LIKES_REVIEW_NO = #{reviewNo} AND LIKES_MEMBER_ID = #{memberId}
	</delete>
	
	
	<!-- movieDetail에 있는 리뷰 중 로그인한 회원이 좋아요를 누른 리뷰가 있는지 확인하기 -->
	<select id="checkMyLike" resultMap="reviewResultMap">
	SELECT
	    t.*,
	    CASE 
	        WHEN #{memId} IS NULL THEN 'false'
	        ELSE nvl2(l2.likes_member_id, 'true', 'false')
	    END as myLike
	FROM (
	    SELECT
	        r.review_no,
	        r.review_member_id,
	        r.review_write_date,
	        r.review_content,
	        r.review_star_rating,
	        coalesce(l.like_count, 0) AS review_like_count,
	        m.member_img
	    FROM
	        movie mo
	    JOIN review r ON mo.movie_no = r.review_movie_no 
	    JOIN member m ON r.review_member_id = m.member_id 
	    LEFT JOIN (
	        SELECT 
	            likes_review_no,
	            COUNT(*) AS like_count
	        FROM
	            likes
	        GROUP BY
	            likes_review_no
	    ) l ON r.review_no = l.likes_review_no 
	    WHERE 
	        mo.movie_no = #{movieNo} 
	    ORDER BY r.review_write_date DESC
	) t 
	LEFT JOIN likes l2 ON t.review_no = l2.likes_review_no
	AND (#{memId} IS NOT NULL AND l2.likes_member_id = #{memId})

	</select>




</mapper>