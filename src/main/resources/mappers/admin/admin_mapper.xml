<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ss.cinema.mappers.adminMapper">
	<!-- addMovie.jsp -->

	<!-- 영화 추가 -->
<insert id="addMovie" parameterType="com.ss.cinema.dto.movieDTO">
    INSERT INTO MOVIE (
        MOVIE_TITLE, 
        MOVIE_START_DATE, 
        MOVIE_END_DATE, 
        MOVIE_DIRECTOR,
        MOVIE_ACTOR, 
        MOVIE_GENRE, 
        MOVIE_AGE_LIMIT, 
        MOVIE_SHOWTIME,
        MOVIE_NATIONALITY, 
        MOVIE_SUMMARY
        <if test="movieMainImage != null">, MOVIE_MAIN_IMAGE</if>
        <if test="movieSubImage != null">, MOVIE_SUB_IMAGE</if>
        <if test="movieSsubImage != null">, MOVIE_SSUB_IMAGE</if>
        <if test="movieTrailer != null">, MOVIE_TRAILER</if>
        <if test="movieMainTrailer != null">, MOVIE_MAIN_TRAILER</if>
        <if test="movieSubTrailer != null">, MOVIE_SUB_TRAILER</if>
        <if test="movieSsubTrailer != null">, MOVIE_SSUB_TRAILER</if>
        <if test="movieMainThumbnail != null">, MOVIE_MAIN_THUMBNAIL</if>
        <if test="movieSubThumbnail != null">, MOVIE_SUB_THUMBNAIL</if>
        <if test="movieSsubThumbnail != null">, MOVIE_SSUB_THUMBNAIL</if>
    ) VALUES (
        #{movieTitle}, 
        #{movieStartDate}, 
        #{movieEndDate},
        #{movieDirector}, 
        #{movieActor}, 
        #{movieGenre}, 
        #{movieAgeLimit}, 
        #{movieShowtime},
        #{movieNationality}, 
        #{movieSummary}
        <if test="movieMainImage != null">, #{movieMainImage}</if>
        <if test="movieSubImage != null">, #{movieSubImage}</if>
        <if test="movieSsubImage != null">, #{movieSsubImage}</if>
        <if test="movieTrailer != null">, #{movieTrailer}</if>
        <if test="movieMainTrailer != null">, #{movieMainTrailer}</if>
        <if test="movieSubTrailer != null">, #{movieSubTrailer}</if>
        <if test="movieSsubTrailer != null">, #{movieSsubTrailer}</if>
        <if test="movieMainThumbnail != null">, #{movieMainThumbnail}</if>
        <if test="movieSubThumbnail != null">, #{movieSubThumbnail}</if>
        <if test="movieSsubThumbnail != null">, #{movieSsubThumbnail}</if>
    )
</insert>



	<!-- movielist 영화 삭제 -->
	 <!-- 영화 관련 데이터를 삭제하는 SQL 쿼리들 -->
	   <!-- 좋아요 삭제 -->
<delete id="deleteLikesByReviewNo" parameterType="int">
    DELETE FROM LIKES WHERE LIKES_REVIEW_NO IN 
    (SELECT REVIEW_NO FROM REVIEW WHERE REVIEW_MOVIE_NO = #{movieNo})
</delete>

<delete id="deleteReviewsByMovieNo" parameterType="int">
    DELETE FROM REVIEW WHERE REVIEW_MOVIE_NO = #{movieNo}
</delete>

<delete id="deleteSeatsByTheaterNo2" parameterType="int">
    DELETE FROM SEAT WHERE SEAT_THEATER_NO IN 
    (SELECT THEATER_NO FROM THEATER WHERE THEATER_CINEMA_NO IN 
    (SELECT CINEMA_NO FROM CINEMA WHERE CINEMA_MOVIE_NO = #{movieNo}))
</delete>

<delete id="deleteTicketsByMovieNo" parameterType="int">
    DELETE FROM TICKET WHERE TICKET_MOVIE_NO = #{movieNo}
</delete>

<delete id="deleteTheatersByCinemaNo" parameterType="int">
    DELETE FROM THEATER WHERE THEATER_CINEMA_NO IN 
    (SELECT CINEMA_NO FROM CINEMA WHERE CINEMA_MOVIE_NO = #{movieNo})
</delete>

<delete id="deleteCinemasByMovieNo" parameterType="int">
    DELETE FROM CINEMA WHERE CINEMA_MOVIE_NO = #{movieNo}
</delete>

<!-- 영화 자체를 삭제 -->
<delete id="deleteMovie" parameterType="int">
    DELETE FROM MOVIE WHERE MOVIE_NO = #{movieNo}
</delete>

	<!-- editmovie 영화 정보 가져오기 -->
	<select id="getMovieById" parameterType="int" resultMap="movieMap">
		SELECT
		MOVIE_NO AS movieNo,
		MOVIE_TITLE AS movieTitle,
		TO_CHAR(MOVIE_START_DATE, 'YYYY-MM-DD') AS movieStartDate,
		TO_CHAR(MOVIE_END_DATE, 'YYYY-MM-DD') AS movieEndDate,
		MOVIE_DIRECTOR AS movieDirector,
		MOVIE_ACTOR AS movieActor,
		MOVIE_GENRE AS movieGenre,
		MOVIE_AGE_LIMIT AS movieAgeLimit,
		MOVIE_SHOWTIME AS movieShowtime,
		MOVIE_NATIONALITY AS movieNationality,
		MOVIE_SUMMARY AS movieSummary,
		MOVIE_MAIN_IMAGE AS movieMainImage,
		MOVIE_SUB_IMAGE AS movieSubImage,
		MOVIE_SSUB_IMAGE AS movieSsubImage,
		MOVIE_MAIN_TRAILER AS movieMainTrailer,
		MOVIE_SUB_TRAILER AS movieSubTrailer,
		MOVIE_SSUB_TRAILER AS movieSsubTrailer
		FROM MOVIE
		WHERE MOVIE_NO = #{movieNo}
	</select>

	<!-- editmovie 영화 수정 -->
	<update id="updateMovie" parameterType="com.ss.cinema.dto.movieDTO">
		UPDATE MOVIE
		<set>
			MOVIE_TITLE = #{movieTitle},
			MOVIE_START_DATE = #{movieStartDate},
			MOVIE_END_DATE = #{movieEndDate},
			MOVIE_DIRECTOR = #{movieDirector},
			MOVIE_ACTOR = #{movieActor},
			MOVIE_GENRE = #{movieGenre},
			MOVIE_AGE_LIMIT = #{movieAgeLimit},
			MOVIE_SHOWTIME = #{movieShowtime},
			MOVIE_NATIONALITY = #{movieNationality},
			MOVIE_SUMMARY = #{movieSummary},
			<if test="movieMainImage != null and movieMainImage != ''">
				MOVIE_MAIN_IMAGE = #{movieMainImage},
			</if>
			<if test="movieSubImage != null and movieSubImage != ''">
				MOVIE_SUB_IMAGE = #{movieSubImage},
			</if>
			<if test="movieSsubImage != null and movieSsubImage != ''">
				MOVIE_SSUB_IMAGE = #{movieSsubImage},
			</if>
			<if test="movieTrailer != null and movieTrailer != ''">
				MOVIE_TRAILER = #{movieTrailer}
			</if>
		</set>
		WHERE MOVIE_NO = #{movieNo}
	</update>

	<!-- 영화 제목 중복 체크 -->
	<select id="countByMovieTitle" resultType="int">
		SELECT COUNT(*) FROM
		MOVIE WHERE MOVIE_TITLE = #{movieTitle}
	</select>

	<!-- 영화 목록 페이징 조회 -->
	<select id="getMoviesWithLimit" resultMap="movieMap">
		SELECT *
		FROM MOVIE
		ORDER BY MOVIE_NO
		OFFSET #{offset} ROWS
		FETCH NEXT #{limit} ROWS ONLY
	</select>

	<!-- 총 영화 개수 조회 -->
	<select id="countAllMovies" resultType="long">
		SELECT COUNT(*)
		FROM MOVIE
	</select>

	<!-- addproduct.jsp -->
	<!-- Product -->
	<insert id="addProduct" parameterType="com.ss.cinema.dto.ProductDTO">
		INSERT INTO PRODUCT (
		PRODUCT_CODE, PRODUCT_PRICE, PRODUCT_NAME, PRODUCT_ORIGIN, PRODUCT_IMAGE, PRODUCT_CONTENT
		) VALUES (
		#{productCode, jdbcType=VARCHAR},
		#{productPrice, jdbcType=INTEGER},
		#{productName, jdbcType=VARCHAR},
		#{productOrigin, jdbcType=VARCHAR},
		#{productImage, jdbcType=VARCHAR},
		#{productContent, jdbcType=VARCHAR}
		)
	</insert>

	<select id="getAllProducts" resultMap="productMap">
		SELECT PRODUCT_NO, PRODUCT_CODE, PRODUCT_PRICE, PRODUCT_NAME,
		PRODUCT_ORIGIN, PRODUCT_IMAGE, PRODUCT_CONTENT
		FROM PRODUCT
	</select>	
 <!-- PAYMENT_PRODUCT 테이블에서 관련된 레코드를 먼저 삭제 -->
    <delete id="deletePaymentProductByBasketId" parameterType="int">
        DELETE FROM PAYMENT_PRODUCT 
        WHERE PAYMENT_PRODUCT_BASKET_NO IN (
            SELECT BASKET_NO FROM BASKET WHERE BASKET_PRODUCT_NO = #{productId}
        )
    </delete>

    <!-- BASKET 테이블에서 관련된 레코드를 삭제 -->
    <delete id="deleteBasketByProductId" parameterType="int">
        DELETE FROM BASKET WHERE BASKET_PRODUCT_NO = #{productId}
    </delete>

    <!-- PRODUCT 테이블에서 제품 삭제 -->
    <delete id="deleteProduct" parameterType="int">
        DELETE FROM PRODUCT WHERE PRODUCT_NO = #{productId}
    </delete>
    
   

	<select id="getProductsWithLimit" resultMap="productMap">
    <![CDATA[
    SELECT * FROM (
        SELECT a.*, rownum AS rnum
        FROM (
            SELECT *
            FROM PRODUCT
            ORDER BY PRODUCT_NO
        ) a
        WHERE rownum <= #{offset} + #{limit}
    )
    WHERE rnum > #{offset}
    ]]>
	</select>

	<select id="countAllProducts" resultType="long">
		SELECT COUNT(*)
		FROM PRODUCT
	</select>
  <!-- 페이지네이션에 따른 제품 목록을 가져오는 SQL -->
    <select id="getProducts" resultMap="productMap">
    SELECT * FROM (
        SELECT a.*, ROW_NUMBER() OVER (ORDER BY PRODUCT_NO DESC) AS rn 
        FROM PRODUCT a
    ) 
    WHERE rn BETWEEN #{offset} AND #{offset} + #{pageSize} - 1
   
    </select>

    <!-- 전체 제품 수를 계산하는 SQL -->
    <select id="countProducts" resultType="long">
        SELECT COUNT(*) FROM PRODUCT
    </select>
	<!-- addSchedule.jsp -->
	<!-- 영화 목록 조회: 영화 제목 가져오기 -->
	<select id="getAllMovies" resultMap="movieMap">
		SELECT *
		FROM MOVIE
	</select>
<select id="getCinemaNo" parameterType="com.ss.cinema.dto.CinemaDTO" resultType="int">
 SELECT CINEMA_NO
 FROM CINEMA
 WHERE CINEMA_RLG = #{cinemaRLG}
 AND CINEMA_BLG = #{cinemaBLG}
 AND CINEMA_MOVIE_NO = #{cinemaMovieNo}
 AND CINEMA_SCREEN_DATE = #{cinemaScreenDate}
	</select>


<select id="getCinemaCheck" parameterType="com.ss.cinema.dto.CinemaDTO" resultType="int">
 SELECT count(*)
 FROM CINEMA
 WHERE CINEMA_RLG = #{cinemaRLG}
 AND CINEMA_BLG = #{cinemaBLG}
 AND CINEMA_MOVIE_NO = #{cinemaMovieNo}
 AND CINEMA_SCREEN_DATE = #{cinemaScreenDate}
	</select>

	<select id="getMovieShowTime" parameterType="int" resultType="int">
 SELECT MOVIE_SHOWTIME
 FROM MOVIE
 WHERE MOVIE_NO = #{cinemaMovieNo}
	</select>

	<!-- 상영 시간표 추가 -->
	<insert id="addSchedule" parameterType="com.ss.cinema.dto.TheaterDTO">
		INSERT INTO THEATER (
		THEATER_START_TIME, THEATER_END_TIME, THEATER_NAME, THEATER_CINEMA_NO
		) VALUES (
		#{theaterStartTime, jdbcType=DATE}, #{theaterEndTime, jdbcType=DATE}, #{theaterName},
		#{theaterCinemaNo}
		)
	</insert>

	<!-- 모든 회원 정보 조회 SQL -->
	<select id="getAllMembers" resultMap="memberListMap">
		SELECT *
		FROM MEMBER
	</select>

<!-- 이름 또는 아이디를 기준으로 회원 검색 (페이징 포함, Oracle SQL) -->
<select id="searchMembersByIdOrName" resultMap="memberListMap">
    <![CDATA[
    SELECT * FROM (
        SELECT a.*, ROWNUM rnum
        FROM (
            SELECT *
            FROM MEMBER
            WHERE MEMBER_NAME LIKE '%' || #{search} || '%'
            OR MEMBER_ID LIKE '%' || #{search} || '%'
            ORDER BY MEMBER_ID
        ) a
        WHERE ROWNUM <= #{offset} + #{limit}
    )
    WHERE rnum > #{offset}
    ]]>
</select>

<!-- 이름 또는 아이디로 검색한 회원의 총 수 -->
<select id="countMembersByIdOrName" resultType="long">
    SELECT COUNT(*)
    FROM MEMBER
    WHERE MEMBER_NAME LIKE '%' || #{search} || '%'
    OR MEMBER_ID LIKE '%' || #{search} || '%'
</select>

<select id="countAllMembers" resultType="long">
    SELECT COUNT(*)
    FROM MEMBER
</select>
	<select id="getMemberById" parameterType="String" resultMap="memberListMap">
		SELECT *
		FROM MEMBER
		WHERE MEMBER_ID = #{id}
	</select>

	<update id="updateMember">
		UPDATE MEMBER
		SET
		MEMBER_ID = #{memberId},
		MEMBER_NAME = #{memberName},
		MEMBER_PASSWORD = #{memberPassword},
		MEMBER_PHONE = #{memberPhone},
		MEMBER_EMAIL = #{memberEmail},
		MEMBER_COUPON = #{memberCoupon},
		MEMBER_ADMIN =
		<choose>
			<when test="memberAdmin == true"> 'Y' </when>
			<otherwise> 'N' </otherwise>
		</choose>
		,
		MEMBER_STAMP = #{memberStamp}
		WHERE MEMBER_ID = #{memberId}
	</update>

<delete id="deletePaymentProductsByMemberId" parameterType="String">
    DELETE FROM PAYMENT_PRODUCT WHERE PAYMENT_PRODUCT_BASKET_NO IN (SELECT BASKET_NO FROM BASKET WHERE BASKET_MEMBER_ID = #{memberId})
</delete>

<delete id="deletePaymentsByMemberId" parameterType="String">
    DELETE FROM PAYMENT WHERE PAYMENT_IMP_UID = #{memberId}
</delete>

<delete id="deleteTicketsByMemberId" parameterType="String">
    DELETE FROM TICKET WHERE TICKET_MEMBER_ID = #{memberId}
</delete>

<delete id="deleteReviewsByMemberId" parameterType="String">
    DELETE FROM REVIEW WHERE REVIEW_MEMBER_ID = #{memberId}
</delete>

<delete id="deleteBasketsByMemberId" parameterType="String">
    DELETE FROM BASKET WHERE BASKET_MEMBER_ID = #{memberId}
</delete>
  <!-- 좋아요 삭제 -->
    <delete id="deleteLikesByMemberId" parameterType="String">
        DELETE FROM likes WHERE likes_member_id = #{memberId}
    </delete>

<delete id="deleteMember" parameterType="String">
    DELETE FROM MEMBER WHERE MEMBER_ID = #{memberId}
</delete>

	<!-- addSchedule -->
    <!-- 모든 영화 리스트 가져오기 -->

	<!-- 영화 상영 스케줄 추가 -->
	<insert id="addCinema" useGeneratedKeys="true" keyProperty="cinemaNo" keyColumn="CINEMA_NO">
		INSERT INTO CINEMA (CINEMA_RLG, CINEMA_BLG, CINEMA_MOVIE_NO, CINEMA_SCREEN_DATE)
		VALUES (#{cinemaRLG}, #{cinemaBLG}, #{cinemaMovieNo}, #{cinemaScreenDate})
	</insert>

	<insert id="addTheater">
		INSERT INTO THEATER (THEATER_START_TIME, THEATER_END_TIME, THEATER_NAME, THEATER_CINEMA_NO)
		VALUES (
			#{theaterStartTime,jdbcType=TIMESTAMP}, 
			(
				SELECT #{theaterStartTime} + INTERVAL '1' MINUTE * MOVIE_SHOWTIME
				FROM MOVIE
				WHERE MOVIE_NO = (SELECT CINEMA_MOVIE_NO FROM CINEMA WHERE CINEMA_NO = #{theaterCinemaNo})
			), 
			#{theaterName}, 
			#{theaterCinemaNo}
		)
	</insert>

	<!-- 영화 상영 스케줄 조회 결과를 매핑할 resultMap 정의 -->
	<resultMap id="movieScheduleResultMap2" type="com.ss.cinema.dto.TheaterDTO">
		<id property="theaterNo" column="THEATER_NO"/>
		<result property="theaterStartTime" column="THEATER_START_TIME"/>
		<result property="theaterEndTime" column="THEATER_END_TIME"/>
		<result property="theaterName" column="THEATER_NAME"/>
		<result property="revSeatCnt" column="REV_SEAT_CNT"/>
		
		<association property="cinema" javaType="com.ss.cinema.dto.CinemaDTO">
			<id property="cinemaNo" column="CINEMA_NO"/>
			<result property="cinemaRLG" column="CINEMA_RLG"/>
			<result property="cinemaBLG" column="CINEMA_BLG"/>
			<result property="cinemaScreenDate" column="CINEMA_SCREEN_DATE"/>
			<result property="cinemaMovieNo" column="CINEMA_MOVIE_NO"/>
		</association>
		
		<association property="movie" javaType="com.ss.cinema.dto.movieDTO">
			<id property="movieNo" column="MOVIE_NO"/>
			<result property="movieTitle" column="MOVIE_TITLE"/>
			<result property="movieStartDate" column="MOVIE_START_DATE"/>
			<result property="movieEndDate" column="MOVIE_END_DATE"/>
		</association>
	</resultMap>
	 
	<select id="getMovieScheduleDetails" resultMap="movieScheduleResultMap2">
		SELECT
			t.THEATER_NO,
			t.THEATER_START_TIME,
			t.THEATER_END_TIME,
			t.THEATER_NAME,
			c.CINEMA_NO,
			c.CINEMA_RLG,
			c.CINEMA_BLG,
			c.CINEMA_SCREEN_DATE,
			c.CINEMA_MOVIE_NO,
			m.MOVIE_NO,
			m.MOVIE_TITLE,
			m.MOVIE_START_DATE,
			m.MOVIE_END_DATE
		FROM
			THEATER t
		JOIN
			CINEMA c ON t.THEATER_CINEMA_NO = c.CINEMA_NO
		JOIN
			MOVIE m ON c.CINEMA_MOVIE_NO = m.MOVIE_NO
		WHERE
			(#{movieNo, jdbcType=INTEGER} IS NULL OR m.MOVIE_NO = #{movieNo, jdbcType=INTEGER}) AND
			(#{cinemaRLG, jdbcType=VARCHAR} IS NULL OR c.CINEMA_RLG = #{cinemaRLG, jdbcType=VARCHAR}) AND
			(#{cinemaBLG, jdbcType=VARCHAR} IS NULL OR c.CINEMA_BLG = #{cinemaBLG, jdbcType=VARCHAR}) AND
			(#{cinemaScreenDate, jdbcType=DATE} IS NULL OR c.CINEMA_SCREEN_DATE = #{cinemaScreenDate, jdbcType=DATE}) AND
			(#{theaterName, jdbcType=VARCHAR} IS NULL OR t.THEATER_NAME = #{theaterName, jdbcType=VARCHAR})
	</select>




	<!-- Member ResultMap -->
	<resultMap type="MemberDTO" id="memberListMap">
		<id property="memberId" column="MEMBER_ID" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberPassword" column="MEMBER_PASSWORD" />
		<result property="memberPhone" column="MEMBER_PHONE" />
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberCoupon" column="MEMBER_COUPON" />
		<result property="memberAdmin" column="MEMBER_ADMIN" />
		<result property="memberStamp" column="MEMBER_STAMP" />
	</resultMap>

	<!-- movieDTO에 대한 resultMap 정의 -->
	<resultMap type="movieDTO" id="movieMap">
		<id property="movieNo" column="MOVIE_NO" />
		<result property="movieTitle" column="MOVIE_TITLE" />
		<result property="movieStartDate" column="MOVIE_START_DATE" />
		<result property="movieEndDate" column="MOVIE_END_DATE" />
		<result property="movieDirector" column="MOVIE_DIRECTOR" />
		<result property="movieActor" column="MOVIE_ACTOR" />
		<result property="movieGenre" column="MOVIE_GENRE" />
		<result property="movieAgeLimit" column="MOVIE_AGE_LIMIT" />
		<result property="movieShowtime" column="MOVIE_SHOWTIME" />
		<result property="movieNationality" column="MOVIE_NATIONALITY" />
		<result property="movieSummary" column="MOVIE_SUMMARY" />
		<result property="movieMainImage" column="MOVIE_MAIN_IMAGE" />
		<result property="movieSubImage" column="MOVIE_SUB_IMAGE" />
		<result property="movieSsubImage" column="MOVIE_SSUB_IMAGE" />
		<result property="movieTrailer" column="MOVIE_TRAILER" />
		    <result property="movieMainThumbnail" column="MOVIE_MAIN_THUMBNAIL" /> <!-- 추가 -->
    <result property="movieSubThumbnail" column="MOVIE_SUB_THUMBNAIL" />   <!-- 추가 -->
    <result property="movieSsubThumbnail" column="MOVIE_SSUB_THUMBNAIL" /> 
	</resultMap>

	<!-- productDTO에 대한 resultMap 정의 -->
	<resultMap type="com.ss.cinema.dto.ProductDTO" id="productMap">
		<id property="productNo" column="PRODUCT_NO" />
		<result property="productCode" column="PRODUCT_CODE" />
		<result property="productPrice" column="PRODUCT_PRICE" />
		<result property="productName" column="PRODUCT_NAME" />
		<result property="productOrigin" column="PRODUCT_ORIGIN" />
		<result property="productImage" column="PRODUCT_IMAGE" />
		<result property="productContent" column="PRODUCT_CONTENT"/>
	</resultMap>

	<!-- CinemaDTO에 대한 resultMap 정의 -->
	<resultMap type="CinemaDTO" id="cinemaMap">
		<id property="cinemaNo" column="CINEMA_NO" />
		<result property="cinemaRLG" column="CINEMA_RLG" />
		<result property="cinemaBLG" column="CINEMA_BLG" />
		<result property="cinemaMovieNo" column="CINEMA_MOVIE_NO" />
		<result property="cinemaScreenDate" column="CINEMA_SCREEN_DATE" />
	</resultMap>

	<!-- TheaterDTO에 대한 resultMap 정의 -->
	<resultMap type="TheaterDTO" id="theaterMap">
		<id property="theaterNo" column="THEATER_NO" />
		<result property="theaterStartTime" column="THEATER_START_TIME" />
		<result property="theaterEndTime" column="THEATER_END_TIME" />
		<result property="theaterName" column="THEATER_NAME" />
		<result property="theaterCinemaNo" column="THEATER_CINEMA_NO" />
		<result property="revSeatCnt" column="REV_SEAT_CNT" />
	</resultMap>

	<resultMap id="movieScheduleResultMap" type="com.ss.cinema.dto.movieDTO">
		<!-- MovieDTO에 대한 매핑 -->
		<id property="movieNo" column="MOVIE_NO"/>
		<result property="movieTitle" column="MOVIE_TITLE"/>
		<result property="movieStartDate" column="MOVIE_START_DATE"/>
		<result property="movieEndDate" column="MOVIE_END_DATE"/>
		<result property="movieDirector" column="MOVIE_DIRECTOR"/>
		<result property="movieActor" column="MOVIE_ACTOR"/>
		<result property="movieGenre" column="MOVIE_GENRE"/>
		<result property="movieAgeLimit" column="MOVIE_AGE_LIMIT"/>
		<result property="movieShowtime" column="MOVIE_SHOWTIME"/>
		<result property="movieNationality" column="MOVIE_NATIONALITY"/>
		<result property="movieSummary" column="MOVIE_SUMMARY"/>
		<result property="movieMainImage" column="MOVIE_MAIN_IMAGE"/>
		<result property="movieSubImage" column="MOVIE_SUB_IMAGE"/>
		<result property="movieSsubImage" column="MOVIE_SSUB_IMAGE"/>
		<result property="movieTrailer" column="MOVIE_TRAILER"/>
		<result property="movieMainThumbnail" column="MOVIE_MAIN_THUMBNAIL"/>
		<result property="movieSubThumbnail" column="MOVIE_SUB_THUMBNAIL"/>
		<result property="movieSsubThumbnail" column="MOVIE_SSUB_THUMBNAIL"/>
		
		<!-- CinemaDTO와 연관된 매핑 -->
		<association property="cinema" javaType="com.ss.cinema.dto.CinemaDTO">
			<id property="cinemaNo" column="CINEMA_NO"/>
			<result property="cinemaRLG" column="CINEMA_RLG"/>
			<result property="cinemaBLG" column="CINEMA_BLG"/>
			<result property="cinemaScreenDate" column="CINEMA_SCREEN_DATE"/>
		</association>

		<!-- TheaterDTO와 연관된 매핑 -->
		<association property="theater" javaType="com.ss.cinema.dto.TheaterDTO">
			<id property="theaterNo" column="THEATER_NO"/>
			<result property="theaterStartTime" column="THEATER_START_TIME"/>
			<result property="theaterEndTime" column="THEATER_END_TIME"/>
			<result property="theaterName" column="THEATER_NAME"/>
			<result property="revSeatCnt" column="REV_SEAT_CNT"/>
		</association>
	</resultMap>

    <delete id="deleteSeatsByTheaterNo" parameterType="int">
        DELETE FROM SEAT WHERE SEAT_THEATER_NO = #{theaterNo}
    </delete>
    
    <delete id="deleteTicketsByTheaterNo" parameterType="int">
        DELETE FROM TICKET WHERE TICKET_THEATER_NO = #{theaterNo}
    </delete>
    
    <delete id="deleteTheater" parameterType="int">
        DELETE FROM THEATER WHERE THEATER_NO = #{theaterNo}
    </delete>

</mapper>
   <!-- 중복된 상영 시간표가 있는지 확인하는 쿼리 
    <select id="countOverlappingSchedules" parameterType="map" resultType="int">
        <![CDATA[
        SELECT COUNT(*)
        FROM schedules
        WHERE cinema_screen_date = #{cinemaScreenDate}
          AND theater_name = #{theaterName}
          AND (
                (theater_start_time < #{theaterEndTime} AND theater_end_time > #{theaterStartTime})
          )
        ]]>
    </select> -->


    <!-- 모든 회원 정보 조회 SQL 
    <select id="getAllMembers" resultMap="memberListMap">
        SELECT 
            MEMBER_ID,
            MEMBER_NAME,
            MEMBER_PASSWORD,
            MEMBER_GENDER,
            MEMBER_SOCIAL_SECURITY_NUM,
            MEMBER_PHONE,
            MEMBER_EMAIL,
            MEMBER_COUPON,
            MEMBER_ADMIN,
            MEMBER_STAMP
        FROM MEMBER
    </select> -->